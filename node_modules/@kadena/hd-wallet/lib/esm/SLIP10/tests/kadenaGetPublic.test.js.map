{"version":3,"file":"kadenaGetPublic.test.js","sourceRoot":"","sources":["../../../../src/SLIP10/tests/kadenaGetPublic.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAE9C,OAAO,EACL,iBAAiB,EACjB,eAAe,EACf,oBAAoB,GACrB,MAAM,aAAa,CAAC;AAErB,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAC5B,MAAM,IAAI,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAE5D,MAAM,eAAe,GAAG,MAAM,eAAe,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACjE,MAAM,eAAe,GAAG,MAAM,eAAe,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAEjE,MAAM,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;QAC1F,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAC5B,MAAM,IAAI,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAE5D,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAChC,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,GAAG,CAClC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAC/D,CAAC;QAEF,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;YAC/B,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,wCAAwC;QACtF,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;QAC/E,MAAM,QAAQ,GAAG,MAAM,CAAC;QACxB,MAAM,IAAI,GAAG,MAAM,oBAAoB,CACrC,QAAQ;QACR,+CAA+C;QAC/C,mFAAmF,CACpF,CAAC;QACF,IAAI,SAAS,GAAG,MAAM,eAAe,CACnC,QAAQ,EACR,IAAI,EACJ,CAAC,EACD,2BAA2B,CAC5B,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CACpB,kEAAkE,CACnE,CAAC;QACF,SAAS,GAAG,MAAM,eAAe,CAC/B,QAAQ,EACR,IAAI,EACJ,CAAC,EACD,2BAA2B,CAC5B,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CACpB,kEAAkE,CACnE,CAAC;QACF,SAAS,GAAG,MAAM,eAAe,CAC/B,QAAQ,EACR,IAAI,EACJ,CAAC,EACD,2BAA2B,CAC5B,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CACpB,kEAAkE,CACnE,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport {\n  kadenaGenMnemonic,\n  kadenaGetPublic,\n  kadenaMnemonicToSeed,\n} from '../index.js';\n\ndescribe('kadenaGetPublic', () => {\n  it('should retrieve the public key from seed and the given index', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n\n    const publicKeyIndex0 = await kadenaGetPublic(password, seed, 0);\n    const publicKeyIndex1 = await kadenaGetPublic(password, seed, 1);\n\n    expect(publicKeyIndex0).toHaveLength(64);\n    expect(publicKeyIndex1).toHaveLength(64);\n    expect(publicKeyIndex1).not.toBe(publicKeyIndex0);\n  });\n\n  it('should retrieve distinct public keys from seedBuffer for different indexes', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n\n    const indexes = [0, 1, 2, 3, 4];\n    const publicKeys = await Promise.all(\n      indexes.map((index) => kadenaGetPublic(password, seed, index)),\n    );\n\n    publicKeys.forEach((publicKey) => {\n      expect(publicKey).toHaveLength(64);\n    });\n\n    const uniquePublicKeys = new Set(publicKeys); // Check that all public keys are unique\n    expect(uniquePublicKeys.size).toBe(indexes.length);\n  });\n\n  it('should get the similar public keys as Enkrypt for the same path', async () => {\n    const password = 'pass';\n    const seed = await kadenaMnemonicToSeed(\n      password,\n      // this mnemonic is generated by Enkrypt wallet\n      'coyote utility final warfare thumb symbol mule scale final nominee behave crumble',\n    );\n    let publicKey = await kadenaGetPublic(\n      password,\n      seed,\n      0,\n      \"m'/44'/626'/<index>/0'/0'\",\n    );\n    expect(publicKey).toBe(\n      '43726c4a2e7b03fa5d23635307e5b130baf8b261e1081c099a2b43db1d4554cc',\n    );\n    publicKey = await kadenaGetPublic(\n      password,\n      seed,\n      1,\n      \"m'/44'/626'/<index>/0'/0'\",\n    );\n    expect(publicKey).toBe(\n      '3f53dfad097fdf8501c32b275e109980ed7121866a63ca34bb035c4a2e41a265',\n    );\n    publicKey = await kadenaGetPublic(\n      password,\n      seed,\n      2,\n      \"m'/44'/626'/<index>/0'/0'\",\n    );\n    expect(publicKey).toBe(\n      '3021bcfa703cc4fac007ab4c5050df5c0b8ca7d655ea80c84af9ea5e43ecf0ff',\n    );\n  });\n});\n"]}