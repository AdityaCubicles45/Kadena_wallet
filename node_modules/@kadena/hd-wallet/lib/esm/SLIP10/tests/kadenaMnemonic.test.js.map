{"version":3,"file":"kadenaMnemonic.test.js","sourceRoot":"","sources":["../../../../src/SLIP10/tests/kadenaMnemonic.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAE9C,OAAO,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,MAAM,aAAa,CAAC;AAEtE,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAEhE,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;QAC1C,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;QACrC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;QACvE,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAC5B,MAAM,IAAI,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC5D,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,kEAAkE;IACxG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;QACrC,MAAM,QAAQ,GAAG,UAAU,CAAC;QAC5B,MAAM,IAAI,GAAG,MAAM,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACpD,MAAM,CAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,eAAe,GAAG,8BAA8B,CAAC;QAEvD,MAAM,MAAM,CACV,oBAAoB,CAAC,UAAU,EAAE,eAAe,CAAC,CAClD,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,aAAa,GAAG,EAAE,CAAC;QAEzB,MAAM,MAAM,CACV,oBAAoB,CAAC,UAAU,EAAE,aAAa,CAAC,CAChD,CAAC,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport { kadenaGenMnemonic, kadenaMnemonicToSeed } from '../index.js';\n\nimport { kadenaDecrypt } from '../../utils/kadenaEncryption.js';\n\ndescribe('kadenaGenMnemonic', () => {\n  it('should generate a valid mnemonic', () => {\n    const mnemonic = kadenaGenMnemonic();\n    expect(mnemonic.split(' ')).toHaveLength(12);\n  });\n});\n\ndescribe('kadenaMnemonicToSeed', () => {\n  it('should convert mnemonic to encrypt seed with a password', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n    expect(typeof seed).toBe('string'); // Check if the seed is a string, indicating it has been encrypted\n  });\n\n  it('returns encrypted seed that can be decrypted with the password', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n    const decryptedSeed = kadenaDecrypt(password, seed);\n    expect(decryptedSeed).toBeTruthy();\n  });\n\n  it('should throw an error for an invalid mnemonic', async () => {\n    const invalidMnemonic = 'this is not a valid mnemonic';\n\n    await expect(\n      kadenaMnemonicToSeed('password', invalidMnemonic),\n    ).rejects.toThrowError('Invalid mnemonic.');\n  });\n\n  it('should throw an error when mnemonic is empty', async () => {\n    const emptyMnemonic = '';\n\n    await expect(\n      kadenaMnemonicToSeed('password', emptyMnemonic),\n    ).rejects.toThrowError('Invalid mnemonic.');\n  });\n});\n"]}