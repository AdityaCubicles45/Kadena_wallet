{"version":3,"file":"kadenaKeyPairsFromRandom.js","sourceRoot":"","sources":["../../../src/SLIP10/kadenaKeyPairsFromRandom.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD;;;;;;GAMG;AACH,MAAM,UAAU,wBAAwB,CACtC,QAAgB,CAAC;IAEjB,MAAM,QAAQ,GAA+C,EAAE,CAAC;IAChE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC;QAC3C,MAAM,gBAAgB,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,cAAc,GAAG,eAAe,KAAK,GAAG,CAAC;QAC/C,MAAM,IAAI,GAAG,aAAa,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;QAE7D,QAAQ,CAAC,IAAI,CAAC;YACZ,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC,CAAC;IACL,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { randomBytes } from '../utils/crypto.js';\nimport { deriveKeyPair } from './utils/sign.js';\n/**\n * Generates random key pairs without updating the internal state.\n *\n * @param count - The number of key pairs to generate default is `1`.\n * @returns An array of generated key pairs.\n * @public\n */\nexport function kadenaKeyPairsFromRandom(\n  count: number = 1,\n): { publicKey: string; secretKey: string }[] {\n  const keyPairs: { publicKey: string; secretKey: string }[] = [];\n  for (let index = 0; index < count; index++) {\n    const randomSeedBuffer = randomBytes(32);\n    const derivationPath = `m'/44'/626'/${index}'`;\n    const pair = deriveKeyPair(randomSeedBuffer, derivationPath);\n\n    keyPairs.push({\n      publicKey: pair.publicKey,\n      secretKey: pair.privateKey,\n    });\n  }\n\n  return keyPairs;\n}\n"]}