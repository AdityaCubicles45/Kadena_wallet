{"version":3,"file":"kadenaMnemonicToRootKeypair.js","sourceRoot":"","sources":["../../../../src/chainweaver/compatibility/kadenaMnemonicToRootKeypair.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,2BAA2B,IAAI,mCAAmC,EAAE,MAAM,qBAAqB,CAAC;AAEzG,MAAM,CAAC,MAAM,2BAA2B,GAAG,KAAK,EAG9C,QAA6B,EAC7B,QAAgB,EAChB,SAAkB,QAAmB,EACrC,EAAE;IACF,MAAM,MAAM,GAAG,MAAM,mCAAmC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC7E,OAAO,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AACjD,CAAC,CAAC","sourcesContent":["import { kadenaEncrypt } from '../../index.js';\nimport { kadenaMnemonicToRootKeypair as originalKadenaMnemonicToRootKeypair } from '../kadena-crypto.js';\n\nexport const kadenaMnemonicToRootKeypair = async <\n  TEncode extends 'base64' | 'buffer' = 'base64',\n>(\n  password: string | Uint8Array,\n  mnemonic: string,\n  encode: TEncode = 'base64' as TEncode,\n) => {\n  const result = await originalKadenaMnemonicToRootKeypair(password, mnemonic);\n  return kadenaEncrypt(password, result, encode);\n};\n"]}