import { kadenaDecrypt } from '../../index.js';
import { kadenaGenKeypair as kadenaGenKeypairOriginal } from '../kadena-crypto.js';
import { encryptLegacySecretKey } from './encryption.js';
const HARDENED_OFFSET = 0x80000000;
const harden = (n) => HARDENED_OFFSET + n;
async function kadenaGenOneKeypair(password, rootKey, index) {
    if (index < HARDENED_OFFSET) {
        throw new Error('Index must be hardened');
    }
    const keyPair = await kadenaGenKeypairOriginal(password, rootKey, index);
    return {
        publicKey: Buffer.from(keyPair[1]).toString('hex'),
        secretKey: await encryptLegacySecretKey(password, keyPair[0]),
    };
}
export async function kadenaGenKeypair(password, rootKey, indexOrRange) {
    const decrypted = await kadenaDecrypt(password, rootKey);
    if (typeof indexOrRange === 'number') {
        return await kadenaGenOneKeypair(password, decrypted, harden(indexOrRange));
    }
    const [start, end] = indexOrRange;
    const keypairs = [];
    for (let i = start; i <= end; i += 1) {
        keypairs.push(await kadenaGenOneKeypair(password, decrypted, harden(i)));
    }
    return keypairs;
}
//# sourceMappingURL=kadenaGenKeypair.js.map