{"version":3,"file":"encryption.js","sourceRoot":"","sources":["../../../../src/chainweaver/compatibility/encryption.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAE/C,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,QAA6B,EAC7B,SAAqB;IAErB,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACrC,MAAM,eAAe,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACjE,yCAAyC;IACzC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IACpE,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACvD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,IAAI,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC3E,OAAO,MAAyB,CAAC;AACnC,CAAC;AAED,MAAM,UAAU,+BAA+B,CAC7C,SAA0B;IAE1B,kBAAkB;IAClB,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACrF,IAAI,eAAe,KAAK,SAAS;QAAE,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACrE,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChE,CAAC","sourcesContent":["import type { EncryptedString } from '../../index.js';\nimport { kadenaEncrypt } from '../../index.js';\n\nexport async function encryptLegacySecretKey(\n  password: string | Uint8Array,\n  secretKey: Uint8Array,\n): Promise<EncryptedString> {\n  const xpub = secretKey.slice(64, 96);\n  const encryptedSecret = await kadenaEncrypt(password, secretKey);\n  // Add public key to the encrypted secret\n  const encrypted = Buffer.from(encryptedSecret, 'base64').toString();\n  const publicKey = Buffer.from(xpub).toString('base64');\n  const result = Buffer.from(`${encrypted}.${publicKey}`).toString('base64');\n  return result as EncryptedString;\n}\n\nexport function getPublicKeyFromLegacySecretKey(\n  secretKey: EncryptedString,\n): string {\n  // prettier-ignore\n  const publicKeyBase64 = Buffer.from(secretKey, 'base64').toString().split('.').pop();\n  if (publicKeyBase64 === undefined) throw Error('Invalid secret key');\n  return Buffer.from(publicKeyBase64, 'base64').toString('hex');\n}\n"]}