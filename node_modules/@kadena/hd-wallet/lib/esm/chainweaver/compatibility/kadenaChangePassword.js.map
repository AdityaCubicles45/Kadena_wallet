{"version":3,"file":"kadenaChangePassword.js","sourceRoot":"","sources":["../../../../src/chainweaver/compatibility/kadenaChangePassword.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAE/C,OAAO,EAAE,oBAAoB,IAAI,4BAA4B,EAAE,MAAM,qBAAqB,CAAC;AAC3F,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAEzD,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EACvC,SAAqB,EACrB,WAAmB,EACnB,WAAmB,EACO,EAAE;IAC5B,MAAM,YAAY,GAAG,MAAM,4BAA4B,CACrD,MAAM,aAAa,CAAC,WAAW,EAAE,SAAS,CAAC,EAC3C,WAAW,EACX,WAAW,CACZ,CAAC;IACF,OAAO,sBAAsB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;AAC3D,CAAC,CAAC","sourcesContent":["import type { EncryptedString } from '../../index.js';\nimport { kadenaDecrypt } from '../../index.js';\nimport type { BinaryLike } from '../../utils/crypto.js';\nimport { kadenaChangePassword as originalKadenaChangePassword } from '../kadena-crypto.js';\nimport { encryptLegacySecretKey } from './encryption.js';\n\nexport const kadenaChangePassword = async (\n  secretKey: BinaryLike,\n  oldPassword: string,\n  newPassword: string,\n): Promise<EncryptedString> => {\n  const newSecretKey = await originalKadenaChangePassword(\n    await kadenaDecrypt(oldPassword, secretKey),\n    oldPassword,\n    newPassword,\n  );\n  return encryptLegacySecretKey(newPassword, newSecretKey);\n};\n"]}