{"version":3,"file":"kadenaSignFromRootKey.js","sourceRoot":"","sources":["../../../../src/chainweaver/compatibility/kadenaSignFromRootKey.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAEzD;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,QAA6B,EAC7B,IAAY,EACZ,OAAwB,EACxB,KAAa;IAEb,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,gBAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACvE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACxD,OAAO,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;AACnE,CAAC","sourcesContent":["import type { EncryptedString } from '../../index.js';\nimport { kadenaDecrypt } from '../../index.js';\nimport { kadenaSign } from '../kadena-crypto.js';\nimport { kadenaGenKeypair } from './kadenaGenKeypair.js';\n\n/**\n * Sign a base64 message with a root key and the index of the keypair to use\n * @param password\n * @param hash // base64 hash\n * @param rootKey\n * @param index\n * @returns signature\n */\nexport async function kadenaSignFromRootKey(\n  password: string | Uint8Array,\n  hash: string,\n  rootKey: EncryptedString,\n  index: number,\n): Promise<Uint8Array> {\n  const { secretKey } = await kadenaGenKeypair(password, rootKey, index);\n  const secret = await kadenaDecrypt(password, secretKey);\n  return kadenaSign(password, Buffer.from(hash, 'base64'), secret);\n}\n"]}