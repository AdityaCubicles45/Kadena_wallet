{"version":3,"file":"buffer-helpers.js","sourceRoot":"","sources":["../../../src/utils/buffer-helpers.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,MAAc;IAC3C,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACnC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,MAAc;IAC3C,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACvC,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,UAAsB,EAAU,EAAE;IAChE,IAAI,UAAU,CAAC,MAAM,KAAK,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC;QACvD,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IACD,OAAO,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC9E,CAAC,CAAC","sourcesContent":["/**\n * Convert a Buffer to a Base64 encoded string.\n * @param {Buffer} buffer - Buffer to convert.\n * @returns {string} - Returns the Base64 encoded string.\n */\nexport function bufferToBase64(buffer: Buffer): string {\n  return buffer.toString('base64');\n}\n\n/**\n * Convert a Base64 encoded string to a Buffer.\n * @param {string} base64 - Base64 encoded string to convert.\n * @returns {Buffer} - Returns the resulting Buffer.\n */\nexport function base64ToBuffer(base64: string): Buffer {\n  return Buffer.from(base64, 'base64');\n}\n\n/**\n * Convert a Uint8Array to a hexadecimal string.\n * @param {Uint8Array} uint8Array - The array to convert.\n * @returns {string} - Returns the hexadecimal representation of the input.\n */\nexport const uint8ArrayToHex = (uint8Array: Uint8Array): string => {\n  if (uint8Array.length === 33 && uint8Array.at(0) === 0) {\n    uint8Array = uint8Array.slice(1);\n  }\n  return [...uint8Array].map((x) => x.toString(16).padStart(2, '0')).join('');\n};\n"]}