{"version":3,"file":"kadenaEncryption.test.js","sourceRoot":"","sources":["../../../../src/utils/tests/kadenaEncryption.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport type { EncryptedString } from '../kadenaEncryption.js';\nimport {\n  kadenaChangePassword,\n  kadenaDecrypt,\n  kadenaEncrypt,\n} from '../kadenaEncryption.js';\n\ndescribe('kadenaDecrypt', () => {\n  it('should correctly decrypt a previously encrypted string', async () => {\n    const password = 'test-password';\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(password, message);\n    const decryptedMessage = await kadenaDecrypt(password, encryptedMessage);\n    expect(Buffer.from(decryptedMessage).toString('utf-8')).toEqual(\n      message.toString('utf-8'),\n    );\n    expect(message.toString()).not.toBe(encryptedMessage);\n    expect(encryptedMessage).not.toBe(Buffer.from(decryptedMessage).toString());\n  });\n\n  it('should throw an error when the incorrect password is provided', async () => {\n    const correctPassword = 'correct-password';\n    const wrongPassword = 'wrong-password';\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(correctPassword, message);\n    await expect(() =>\n      kadenaDecrypt(wrongPassword, encryptedMessage),\n    ).rejects.toThrow('Decryption failed');\n  });\n\n  it('should throw an error if the encrypted key is corrupted', async () => {\n    const password = 'test-password';\n    const corruptedEncryptedPrivateKey = 'corrupted-data' as EncryptedString;\n\n    await expect(() =>\n      kadenaDecrypt(password, corruptedEncryptedPrivateKey),\n    ).rejects.toThrow();\n  });\n\n  it('should throw an error if the encrypted data is empty', async () => {\n    const password = 'test-password';\n    const emptyEncryptedMessage = '' as EncryptedString;\n\n    await expect(() =>\n      kadenaDecrypt(password, emptyEncryptedMessage),\n    ).rejects.toThrow('Encrypted data is empty');\n  });\n\n  it('should handle passwords with special characters', async () => {\n    const specialCharPassword = 'p@ssw0rd!#%&';\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(specialCharPassword, message);\n    const decryptedMessage = await kadenaDecrypt(\n      specialCharPassword,\n      encryptedMessage,\n    );\n    expect(Buffer.from(decryptedMessage).toString()).toBe(message.toString());\n  });\n\n  it('should handle extremely long passwords', async () => {\n    const longPassword = 'p'.repeat(1000);\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(longPassword, message);\n    const decryptedMessage = await kadenaDecrypt(\n      longPassword,\n      encryptedMessage,\n    );\n    expect(Buffer.from(decryptedMessage).toString()).toBe(message.toString());\n  });\n\n  it('should handle unicode characters in passwords', async () => {\n    const unicodePassword = '密码'; // 'password' in Chinese\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(unicodePassword, message);\n    const decryptedMessage = await kadenaDecrypt(\n      unicodePassword,\n      encryptedMessage,\n    );\n\n    expect(Buffer.from(decryptedMessage).toString()).toBe(message.toString());\n  });\n});\n\ndescribe('kadenaChangePassword', () => {\n  const privateKey = Uint8Array.from({ length: 32 }, () =>\n    Math.floor(Math.random() * 256),\n  );\n  const password = 'currentPassword123';\n  const newPassword = 'newPassword123';\n\n  it('changes the password successfully and allows decryption with the new password', async () => {\n    const firstPassword = 'firstPassword123';\n    const secondPassword = 'secondPassword123';\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(firstPassword, message);\n    const newEncryptedMessage = await kadenaChangePassword(\n      firstPassword,\n      encryptedMessage,\n      secondPassword,\n    );\n    expect(encryptedMessage.toString()).not.toBe(\n      newEncryptedMessage.toString(),\n    );\n\n    const decryptedMessage = Buffer.from(\n      await kadenaDecrypt(secondPassword, newEncryptedMessage),\n    );\n\n    expect(decryptedMessage.toString()).toBe(message.toString());\n  });\n\n  it('throws an error when the password is incorrect', async () => {\n    const encryptedPrivateKey = await kadenaEncrypt(password, privateKey);\n    const incorrectPassword = 'wrongPassword';\n    const changePasswordAttempt = () =>\n      kadenaChangePassword(incorrectPassword, encryptedPrivateKey, newPassword);\n\n    await expect(() => changePasswordAttempt()).rejects.toThrow(\n      'Failed to decrypt the private key with the old password: Decryption failed',\n    );\n  });\n\n  it('fails to decrypt with the old password after the password has been changed', async () => {\n    const firstPassword = 'firstPassword123';\n    const secondPassword = 'secondPassword123';\n    const message = Buffer.from('test-message');\n    const encryptedMessage = await kadenaEncrypt(firstPassword, message);\n    const newEncryptedMessage = await kadenaChangePassword(\n      firstPassword,\n      encryptedMessage,\n      secondPassword,\n    );\n    await expect(() =>\n      kadenaDecrypt(firstPassword, newEncryptedMessage),\n    ).rejects.toThrow();\n  });\n\n  const testUndefined = undefined as unknown as EncryptedString;\n  const testNull = null as unknown as EncryptedString;\n  const testUnint8Array = Uint8Array.from({\n    length: 32,\n  }) as unknown as EncryptedString;\n  const testMessage = 'test-message' as EncryptedString;\n\n  it('handles non-string inputs for private keys and passwords', async () => {\n    await expect(() =>\n      kadenaChangePassword(password, testUndefined, newPassword),\n    ).rejects.toThrow();\n    await expect(() =>\n      kadenaChangePassword(testUndefined, testMessage, newPassword),\n    ).rejects.toThrow();\n    await expect(() =>\n      kadenaChangePassword(password, testMessage, testUndefined),\n    ).rejects.toThrow();\n    await expect(() =>\n      kadenaChangePassword(password, testNull, newPassword),\n    ).rejects.toThrow();\n    await expect(() =>\n      kadenaChangePassword(testNull, testUnint8Array, newPassword),\n    ).rejects.toThrow();\n    await expect(() =>\n      kadenaChangePassword(password, testMessage, testNull),\n    ).rejects.toThrow();\n    await expect(() =>\n      kadenaChangePassword(password, testMessage, password),\n    ).rejects.toThrow();\n  });\n});\n"]}