{"version":3,"file":"crypto.js","sourceRoot":"","sources":["../../../src/utils/crypto.ts"],"names":[],"mappings":";;;AAEA;;;;;GAKG;AACI,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAE,CAC1C,MAAM,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AADlC,QAAA,WAAW,eACuB;AAE/C,oBAAoB;AACpB,KAAK,UAAU,SAAS,CAAC,QAAoB,EAAE,IAAgB;IAC7D,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,SAAS;QACf,IAAI,EAAE,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;QACtE,UAAU,EAAE,IAAI;KACjB,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS,CAC5B,IAAI,EACJ,MAAM,MAAM,CAAC,MAAM,CAAC,SAAS,CAC3B,KAAK,EACL,OAAO,QAAQ,KAAK,QAAQ;QAC1B,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;QACpC,CAAC,CAAC,QAAQ,EACZ;QACE,IAAI,EAAE,IAAI,CAAC,IAAI;KAChB,EACD,KAAK,EACL,CAAC,WAAW,CAAC,CACd,EACD;QACE,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,GAAG;KACZ,EACD,KAAK,EACL,CAAC,SAAS,EAAE,SAAS,CAAC,CACvB,CAAC;AACJ,CAAC;AAED,mBAAmB;AACZ,KAAK,UAAU,OAAO,CAC3B,IAAgB,EAChB,QAAoB,EACpB,IAAgB;IAEhB,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,GAAG;QACX,EAAE,EAAE,IAAA,mBAAW,EAAC,EAAE,CAAC;KACX,CAAC;IACX,OAAO;QACL,UAAU,EAAE,IAAI,UAAU,CACxB,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CACzB,IAAI,EACJ,MAAM,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC/B,mCAAmC;QACnC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CACjE,CACF;QACD,EAAE,EAAE,IAAI,CAAC,EAAE;KACZ,CAAC;AACJ,CAAC;AArBD,0BAqBC;AAID,mBAAmB;AACZ,KAAK,UAAU,OAAO,CAC3B,SAAoB,EACpB,QAAoB,EACpB,IAAgB;IAEhB,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,SAAS;QACf,MAAM,EAAE,GAAG;QACX,EAAE,EAAE,SAAS,CAAC,EAAE;KACjB,CAAC;IACF,OAAO,IAAI,UAAU,CACnB,MAAM,MAAM,CAAC,MAAM,CAAC,OAAO,CACzB,IAAI,EACJ,MAAM,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,EAC/B,SAAS,CAAC,UAAU,CACrB,CACF,CAAC;AACJ,CAAC;AAjBD,0BAiBC","sourcesContent":["export type BinaryLike = string | ArrayBuffer | Uint8Array;\n\n/**\n *\n * @param size - size of random bytes\n * @returns Uint8Array of random bytes\n * @public\n */\nexport const randomBytes = (size: number) =>\n  crypto.getRandomValues(new Uint8Array(size));\n\n// derive string key\nasync function deriveKey(password: BinaryLike, salt: BinaryLike) {\n  const algo = {\n    name: 'PBKDF2',\n    hash: 'SHA-256',\n    salt: typeof salt === 'string' ? new TextEncoder().encode(salt) : salt,\n    iterations: 1000,\n  };\n  return crypto.subtle.deriveKey(\n    algo,\n    await crypto.subtle.importKey(\n      'raw',\n      typeof password === 'string'\n        ? new TextEncoder().encode(password)\n        : password,\n      {\n        name: algo.name,\n      },\n      false,\n      ['deriveKey'],\n    ),\n    {\n      name: 'AES-GCM',\n      length: 256,\n    },\n    false,\n    ['encrypt', 'decrypt'],\n  );\n}\n\n// Encrypt function\nexport async function encrypt(\n  text: BinaryLike,\n  password: BinaryLike,\n  salt: BinaryLike,\n) {\n  const algo = {\n    name: 'AES-GCM',\n    length: 256,\n    iv: randomBytes(12),\n  } as const;\n  return {\n    cipherText: new Uint8Array(\n      await crypto.subtle.encrypt(\n        algo,\n        await deriveKey(password, salt),\n        //   new TextEncoder().encode(text)\n        typeof text === 'string' ? new TextEncoder().encode(text) : text,\n      ),\n    ),\n    iv: algo.iv,\n  };\n}\n\ntype Encrypted = Awaited<ReturnType<typeof encrypt>>;\n\n// Decrypt function\nexport async function decrypt(\n  encrypted: Encrypted,\n  password: BinaryLike,\n  salt: BinaryLike,\n) {\n  const algo = {\n    name: 'AES-GCM',\n    length: 256,\n    iv: encrypted.iv,\n  };\n  return new Uint8Array(\n    await crypto.subtle.decrypt(\n      algo,\n      await deriveKey(password, salt),\n      encrypted.cipherText,\n    ),\n  );\n}\n"]}