export type BinaryLike = string | ArrayBuffer | Uint8Array;
/**
 *
 * @param size - size of random bytes
 * @returns Uint8Array of random bytes
 * @public
 */
export declare const randomBytes: (size: number) => Uint8Array;
export declare function encrypt(text: BinaryLike, password: BinaryLike, salt: BinaryLike): Promise<{
    cipherText: Uint8Array;
    iv: Uint8Array;
}>;
type Encrypted = Awaited<ReturnType<typeof encrypt>>;
export declare function decrypt(encrypted: Encrypted, password: BinaryLike, salt: BinaryLike): Promise<Uint8Array>;
export {};
//# sourceMappingURL=crypto.d.ts.map