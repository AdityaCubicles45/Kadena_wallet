{"version":3,"file":"kadenaGenKeypairFromSeed.test.js","sourceRoot":"","sources":["../../../../src/SLIP10/tests/kadenaGenKeypairFromSeed.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport {\n  kadenaGenKeypairFromSeed,\n  kadenaGenMnemonic,\n  kadenaMnemonicToSeed,\n} from '../index.js';\n\nimport { kadenaDecrypt } from '../../utils/kadenaEncryption.js';\n\ndescribe('kadenaGenKeypairFromSeed', () => {\n  it('should generate an encrypted keypair from the seedBuffer when a password is provided', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n    const [publicKey, encryptedPrivateKey] = await kadenaGenKeypairFromSeed(\n      password,\n      seed,\n      0,\n    );\n\n    expect(publicKey).toHaveLength(64);\n    expect(typeof encryptedPrivateKey).toBe('string'); // Checks if privateKey is a string, thus encrypted\n  });\n\n  it('should generate a range of keypairs from the seed', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n    const keyPairs = await kadenaGenKeypairFromSeed(password, seed, [0, 3]);\n    expect(keyPairs).toHaveLength(4);\n    await Promise.all(\n      keyPairs.map(async ([publicKey, privateKey]) => {\n        expect(publicKey).toHaveLength(64);\n        expect(\n          Buffer.from(await kadenaDecrypt(password, privateKey)).toString(\n            'hex',\n          ),\n        ).toHaveLength(64);\n      }),\n    );\n  });\n\n  it('should throw an error for out-of-bounds index values', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n    const outOfBoundsIndex = -1;\n\n    await expect(() =>\n      kadenaGenKeypairFromSeed(password, seed, outOfBoundsIndex),\n    ).rejects.toThrowError('Invalid child index: -1');\n  });\n\n  it('returns an encrypted private key that can be decrypted with the password', async () => {\n    const mnemonic = kadenaGenMnemonic();\n    const password = 'password';\n    const seed = await kadenaMnemonicToSeed(password, mnemonic);\n    const [, encryptedPrivateKey] = await kadenaGenKeypairFromSeed(\n      password,\n      seed,\n      0,\n    );\n    const decryptedPrivateKey = await kadenaDecrypt(\n      password,\n      encryptedPrivateKey,\n    );\n    expect(decryptedPrivateKey).toBeTruthy();\n    expect(Buffer.from(decryptedPrivateKey).toString('hex')).toHaveLength(64);\n  });\n\n  //   it('should handle the highest non-hardened index without throwing errors', async () => {\n  //     const mnemonic = kadenaGenMnemonic();\n  //     const { seedBuffer } = await kadenaMnemonicToSeed(mnemonic);\n\n  //     /*\n  //      * HD wallets as per BIP32 spec define two types of indices:\n  //      * - Non-hardened (ranging from 0 to 2^31 - 1)\n  //      * - Hardened (ranging from 2^31 to 2^32 - 1).\n  //      * The highest non-hardened index is therefore 2^31 - 1,\n  //      * which is the largest 32-bit integer that can be used for generating non-hardened keys.\n  //      */\n\n  //     const highestNonHardenedIndex = 2 ** 31 - 1;\n  //     expect(() => {\n  //       kadenaGenKeypairFromSeed(seedBuffer, highestNonHardenedIndex);\n  //     }).not.toThrow();\n  //   });\n});\n"]}