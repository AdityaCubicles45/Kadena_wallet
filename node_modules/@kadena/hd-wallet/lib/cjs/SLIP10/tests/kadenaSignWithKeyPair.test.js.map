{"version":3,"file":"kadenaSignWithKeyPair.test.js","sourceRoot":"","sources":["../../../../src/SLIP10/tests/kadenaSignWithKeyPair.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAE9C,0CAKqB;AAErB,IAAA,iBAAQ,EAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;IAC3C,MAAM,QAAQ,GAAG,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,IAAA,4BAAiB,GAAE,CAAC;IACrC,MAAM,IAAI,GAAG,MAAM,IAAA,+BAAoB,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAE5D,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,GAAG,MAAM,IAAA,mCAAwB,EAC5D,QAAQ,EACR,IAAI,EACJ,CAAC,CACF,CAAC;IAEF,MAAM,MAAM,GAAW,SAAS,CAAC;IAEjC,IAAA,WAAE,EAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;QACpF,MAAM,MAAM,GAAG,IAAA,gCAAqB,EAAC,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACtE,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;QACvC,IAAA,eAAM,EAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,IAAA,eAAM,EAAC,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\n\nimport {\n  kadenaGenKeypairFromSeed,\n  kadenaGenMnemonic,\n  kadenaMnemonicToSeed,\n  kadenaSignWithKeyPair,\n} from '../index.js';\n\ndescribe('kadenaSignWithKeyPair', async () => {\n  const password = 'password';\n  const mnemonic = kadenaGenMnemonic();\n  const seed = await kadenaMnemonicToSeed(password, mnemonic);\n\n  const [publicKey, privateKey] = await kadenaGenKeypairFromSeed(\n    password,\n    seed,\n    0,\n  );\n\n  const txHash: string = 'tx-hash';\n\n  it('should sign a transaction with a public and private key ans password', async () => {\n    const signer = kadenaSignWithKeyPair(password, publicKey, privateKey);\n    const signature = await signer(txHash);\n    expect(signature).toBeTruthy();\n    expect(signature.sig.length > 0).toBeTruthy();\n  });\n});\n"]}