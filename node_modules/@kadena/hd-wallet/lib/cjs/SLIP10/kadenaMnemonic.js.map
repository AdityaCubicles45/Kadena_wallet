{"version":3,"file":"kadenaMnemonic.js","sourceRoot":"","sources":["../../../src/SLIP10/kadenaMnemonic.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oDAAsC;AACtC,4DAA0D;AAE1D,sEAA6D;AAC7D;;;;;;GAMG;AACH,SAAgB,iBAAiB;IAC/B,OAAO,KAAK,CAAC,gBAAgB,CAAC,kBAAQ,CAAC,CAAC;AAC1C,CAAC;AAFD,8CAEC;AAED;;;;;;;;GAQG;AACI,KAAK,UAAU,oBAAoB,CAGxC,QAAoB,EACpB,QAAgB,EAChB,SAAkB,QAAmB;IAGrC,IAAI,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,kBAAQ,CAAC,KAAK,KAAK,EAAE,CAAC;QACzD,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,UAAU,GAAG,MAAM,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAExD,OAAO,IAAA,mCAAa,EAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;AACrD,CAAC;AAfD,oDAeC;AACD;;;;;;;;;;;;;;GAcG;AACI,MAAM,uBAAuB,GAAG,CAAC,OAAmB,EAAE,EAAE,CAC7D,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,kBAAQ,CAAC,CAAC;AADhC,QAAA,uBAAuB,2BACS","sourcesContent":["import * as bip39 from '@scure/bip39';\nimport { wordlist } from '@scure/bip39/wordlists/english';\nimport type { BinaryLike } from '../utils/crypto.js';\nimport { kadenaEncrypt } from '../utils/kadenaEncryption.js';\n/**\n * Generates a mnemonic phrase using the BIP39 protocol with a specified wordlist.\n *\n * @returns A valid BIP39 mnemonic phrase.\n * @throws If the generated mnemonic is invalid.\n * @public\n */\nexport function kadenaGenMnemonic(): string {\n  return bip39.generateMnemonic(wordlist);\n}\n\n/**\n * Convert a given mnemonic phrase into a seed buffer.\n *\n * @param mnemonic - A mnemonic seed phrase to be converted into a seed buffer.\n * @param password - Optional password for encrypting the seed.\n * @throws Throws an error if the provided mnemonic is not valid.\n * @returns Returns the seed buffer and processed seed.\n * @public\n */\nexport async function kadenaMnemonicToSeed<\n  TEncode extends 'base64' | 'buffer' = 'base64',\n>(\n  password: BinaryLike,\n  mnemonic: string,\n  encode: TEncode = 'base64' as TEncode,\n  // wordList: string[] = wordlist,\n) {\n  if (bip39.validateMnemonic(mnemonic, wordlist) === false) {\n    throw Error('Invalid mnemonic.');\n  }\n\n  const seedBuffer = await bip39.mnemonicToSeed(mnemonic);\n\n  return kadenaEncrypt(password, seedBuffer, encode);\n}\n/**\n * Reversible: Converts raw entropy in form of byte array to mnemonic string.\n * @param entropy - byte array\n * @returns - 12-24 words\n * @public\n * @example\n\n* const ent = new Uint8Array([\n*   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f,\n*   0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f\n* ]);\n* entropyToMnemonic(ent, wordlist);\n* // 'legal winner thank year wave sausage worth useful legal winner thank yellow'\n\n**/\nexport const kadenaEntropyToMnemonic = (entropy: Uint8Array) =>\n  bip39.entropyToMnemonic(entropy, wordlist);\n"]}